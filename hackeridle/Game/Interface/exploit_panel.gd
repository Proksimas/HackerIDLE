extends ColorRect

@onready var interrogation_label: Label = %InterrogationLabel
@onready var exploit_container: HBoxContainer = %ExploitContainer
@onready var ipk_button: Button = %IPKButton
@onready var ipk_label: Label = %IPKLabel
@onready var cost_exploit_label: Label = %CostExploitLabel
@onready var ipc_button: Button = %IPCButton
@onready var cost_exploit_value: Label = %CostExploitValue
@onready var bonus_per_clic_container: VBoxContainer = %BonusPerClicContainer


@onready var bonus_per_click_label: Label = %BonusPerClickLabel
@onready var knowledge_per_click_label: Label = %KnowledgePerClickLabel
@onready var bonus_per_click_label_2: Label = %BonusPerClickLabel2
@onready var knowledge_per_click_label_2: Label = %KnowledgePerClickLabel2

@onready var shop_item: ShopItem = $"../../.."

const GREEN_BUTTON_ENABLED = preload("res://Game/Themes/GreenButtonEnabled.tres")
const RED_BUTTON_DISABLED = preload("res://Game/Themes/RedButtonDisabled.tres")

func _ready() -> void:
	Player.s_earn_exploit_point.connect(self.refresh)
	Player.s_learning_item_level_up.connect(self.add_ipc_modifier)
	pass # Replace with function body.




func _on_ipk_button_pressed() -> void:
	"""augmentation du gain passif de connaissance"""
	var item = shop_item.current_item_cara
	var total_cost = cost_spend_exploit()
	if total_cost > 0:
		Player.exploit_point -= int(total_cost)
		item["level_ipk"] += 1
		refresh()
	pass # Replace with function body. 


func _on_ipc_button_pressed() -> void:
	"""augmentation de la connaissance par click"""
	var item = shop_item.current_item_cara
	var total_cost = cost_spend_exploit()
	if total_cost > 0:
		Player.exploit_point -= int(total_cost)
		item["level_ipc"] += 1
		add_ipc_modifier(item["item_name"])
		refresh()
	pass # Replace with function body.

func add_ipc_modifier(item_name = ""):
	if item_name != shop_item.current_item_cara["item_name"]:
		return #ce n'est pas CET item qui a gagganÃ© un niveay
	var item = shop_item.current_item_cara
	var value =  item["level"] * item["level_ipc"] * \
				item["gain"]
				
	var dict_to_remove = StatsManager.get_modifier_by_source_name(StatsManager.TargetModifier.BRAIN_CLICK, 
				StatsManager.Stats.KNOWLEDGE, "ipc_" + item["item_name"])
	StatsManager.remove_modifier(StatsManager.TargetModifier.BRAIN_CLICK, 
				StatsManager.Stats.KNOWLEDGE, dict_to_remove)
				
	StatsManager.add_modifier(StatsManager.TargetModifier.BRAIN_CLICK,
									StatsManager.Stats.KNOWLEDGE,
									StatsManager.ModifierType.BASE,
									value,
									"ipc_" + item["item_name"])
	if self.visible == true:
		refresh()

func cost_spend_exploit() -> float:
	#_type = level_ipk or level_ipc
	var total_cost = get_cost_exploit()
	if Player.exploit_point < total_cost:
		return -1 #donc on ne peut pas acheter
	else:
		return total_cost

func get_cost_exploit() -> float:
	var item = shop_item.current_item_cara
	if item.is_empty():
		return 0
	var total_level = item["level_ipk"] + item["level_ipc"] #correspond au level total
	var total_cost = total_level + 1 * item["id"]
	return total_cost

func refresh():
	if shop_item.current_item_cara.is_empty():
		return
	cost_exploit_label.text = tr("$Cost")
	ipk_label.text = tr("$DoubleKnowledge")
	var item = shop_item.current_item_cara
	var next_value =  item["level"]  * (item["level_ipc"] + 1) * item["gain"]
	
	bonus_per_click_label_2.text = tr("$bonus_click") +": "
	knowledge_per_click_label_2.text = "+ " + str(Global.number_to_string(next_value))+ " "
	cost_exploit_value.text = Global.number_to_string(get_cost_exploit())
	shop_item.set_refresh(shop_item.current_item_cara)
		
	if item["level_ipc"] + item["level_ipk"] > 0:
		bonus_per_clic_container.show()
		var value =  item["level"]  * item["level_ipc"] * item["gain"]
		bonus_per_click_label.text = tr("$bonus_click") +": "
		knowledge_per_click_label.text = "+ " + str(Global.number_to_string(value)) + " "
	else:
		bonus_per_clic_container.hide()
		
	if Player.nb_of_rebirth >= 1:
		exploit_container.show()
		interrogation_label.hide()
	else:
		exploit_container.hide()
		interrogation_label.show()
	#On affiche la couleur des boutons
	var style_box: StyleBoxFlat
	if cost_spend_exploit() >0:
		style_box = GREEN_BUTTON_ENABLED
	else:
		style_box = RED_BUTTON_DISABLED
	for button: Button in [ipc_button, ipk_button]:
		button.add_theme_stylebox_override("focus",style_box)
		button.add_theme_stylebox_override("normal",style_box)
		button.add_theme_stylebox_override("pressed",style_box)
		button.add_theme_stylebox_override("hover",style_box)
func _on_draw() -> void:
	refresh()
	pass # Replace with function body.
